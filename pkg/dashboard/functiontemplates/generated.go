// Code generated by go generate; DO NOT EDIT.

/*
This machine-generated file contains the configuration and source code for function templates,
which may be retrieved from the dashboard's HTTP API by sending a GET request to /function_templates.

The following functions are included for each supported runtime:
dotnetcore (2): helloworld, reverser
golang (5):     eventhub, helloworld, image, rabbitmq, regexscan
nodejs (1):     dates
python (4):     encrypt, facerecognizer, helloworld, tensorflow
*/

package functiontemplates

import (
	"github.com/nuclio/nuclio/pkg/functionconfig"

	"github.com/ghodss/yaml"
)

var GeneratedFunctionTemplates = []*generatedFunctionTemplate{
	{
		Name: "encrypt:4212354b-c353-42cf-8807-9d148d05ea0e",
		Configuration: unmarshalConfig(`metadata: {}
spec:
  build:
    baseImage: sds.redii.net/nuclio/python-36-centos7:v0.1.1
    commands:
    - yum install -y gcc gcc-c++ make libffi-devel openssl-devel
    - pip install --index-url=http://70.121.224.52:8081/repository/pypi/simple/ --trusted-host=70.121.224.52 simple-crypt
  description: |
    Uses a third-party Python package to encrypt the event body, and showcases build commands for installing both OS-level and Python packages.
  handler: encrypt:encrypt
  maxReplicas: 1
  minReplicas: 1
  platform: {}
  resources: {}
  runtime: python:3.6
`),
		SourceCode: `# Copyright 2017 The Nuclio Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Uses simplecrypt to encrypt the body with a key bound to the function as
# an environment variable. We ask pip to install simplecrypt as part of the
# build process, along with some OS level packages (using apk).
#
# Note: It takes a minute or so to install all the dependencies.
#       Why not star https://github.com/nuclio/nuclio while you wait?
#

import os
import simplecrypt

def encrypt(context, event):
	context.logger.info('Using secret to encrypt body')

	# get the encryption key
	encryption_key = os.environ.get('ENCRYPT_KEY', 'some-default-key')

	# encrypt the body
	encrypted_body = simplecrypt.encrypt(encryption_key, event.body)

	# return the encrypted body, and some hard-coded header
	return context.Response(body=str(encrypted_body),
							headers={'x-encrypt-algo': 'aes256'},
							content_type='text/plain',
							status_code=200)
`,
	},
	{
		Name: "helloworld:fff95d9f-81de-4c1b-8e11-a4102805bbb8",
		Configuration: unmarshalConfig(`metadata: {}
spec:
  build: {}
  description: Showcases unstructured logging and a structured response.
  handler: main:handler
  maxReplicas: 1
  minReplicas: 1
  platform: {}
  resources: {}
  runtime: python:3.6
`),
		SourceCode: `# Copyright 2017 The Nuclio Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

def handler(context, event):
    context.logger.info('This is an unstructured log')

    return context.Response(body='Hello, from Nuclio :]',
                            headers={},
                            content_type='text/plain',
                            status_code=200)
`,
	},
	{
		Name: "dates:f73e97cd-b051-4bc5-90cf-b2be94d0c22c",
		Configuration: unmarshalConfig(`metadata: {}
spec:
  build:
    commands:
    - npm install --global --registry http://70.121.224.52:8081/repository/npm/ moment
  description: |
    Uses moment.js (which is installed as part of the build) to add a specified amount of time to "now", and returns this amount as a string.
  handler: handler
  maxReplicas: 1
  minReplicas: 1
  platform: {}
  resources: {}
  runtime: nodejs
`),
		SourceCode: `/*
Copyright 2017 The Nuclio Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Uses moment.js (installed as part of the build) to add a given amount of time
// to "now", and returns this as string. Invoke with a JSON containing:
//  - value: some number
//  - unit: some momentjs unit, as a string - e.g. days, d, hours, miliseconds
//
// For example, the following will add 3 hours to current time and return the response:
// {
//     "value": 3,
//     "unit": "hours"
// }
//

var moment = require('moment');

exports.handler = function(context, event) {
    var request = JSON.parse(event.body);
    var now = moment();

    context.logger.infoWith('Adding to now', {
        'request': request,
        'to': now.format()
    });

    now.add(request.value, request.unit);

    context.callback(now.format());
};
`,
	},
}

// no error checking is performed here. this is guaranteed to work, because the strings fed to this function
// are marshalled representations of actual configuration objects that were created while generating this file
func unmarshalConfig(marshalledConfig string) functionconfig.Config {
	config := functionconfig.Config{}

	err := yaml.Unmarshal([]byte(marshalledConfig), &config)
	if err != nil {
		panic("failed to unmarshal marshaled config")
	}

	return config
}
